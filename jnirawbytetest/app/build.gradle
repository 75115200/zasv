import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        maven {
            url "http://maven.oa.com/nexus/content/groups/androidbuild"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'org.aspectj:aspectjtools:1.8.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
repositories {
        maven {
            url "http://maven.oa.com/nexus/content/groups/androidbuild"
        }
    jcenter()
}
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "24.0.0"
    defaultConfig {
        applicationId "com.young.jnirawbytetest"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -fno-exceptions -fvisibility=hidden"
                abiFilters 'armeabi', 'armeabi-v7a'
            }
        }

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a'
            jobs 8
            stl 'stlport_static'
        }
    }

    externalNativeBuild {
        cmake {
//            path "CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    productFlavors {
        pruduct {
            //default publish flavor
        }
    }

    //set its value according to CI env
    def isCiEnv = false

    // filter variants.
    variantFilter { variant ->
        //ignore instant-run variant on CI platform
        def ignore = isCiEnv &&
                variant.flavors*.name.contains(INSTANT_RUN_FALVOR)

        variant.setIgnore(ignore)
    }

    applicationVariants.all { variant ->
        def javaCompile = variant.javaCompiler
        def log = logger;
        javaCompile.doLast {
            String[] args = [
                    '-showWeaveInfo',
                    '-1.8',
                    '-inpath', javaCompile.destinationDir as String,
                    '-aspectpath', javaCompile.classpath.asPath,
                    '-d', javaCompile.destinationDir as String,
                    '-classpath', javaCompile.classpath.asPath,
                    '-bootclasspath', android.bootClasspath.join(File.pathSeparator)
            ]

            log.debug "ajc args: " + Arrays.toString(args)

            MessageHandler handler = new MessageHandler(true);
            new Main().run(args, handler);
            for (IMessage message : handler.getMessages(null, true)) {
                println message
                switch (message.getKind()) {
                    case IMessage.ABORT:
                    case IMessage.ERROR:
                    case IMessage.FAIL:
                        log.error message.message, message.thrown
                        break;
                    case IMessage.WARNING:
                        log.warn message.message, message.thrown
                        break;
                    case IMessage.INFO:
                        log.info message.message, message.thrown
                        break;
                    case IMessage.DEBUG:
                        log.debug message.message, message.thrown
                        break;
                }
            }
        }
    }
}

dependencies {
    provided 'io.github.landerlyoung:jenny-annotation:0.1.0'
//    annotationProcessor 'io.github.landerlyoung:jenny-compiler:0.1.0'

    compile 'org.aspectj:aspectjrt:1.8.1'

    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:23.1.1'
    testCompile 'junit:junit:4.12'
}

task cleanExternalNativeBuildCache(type: Delete) {
    //fix gradle plugin bug: not remove .externalNativeBuild automatic.
    delete project.projectDir.absolutePath + "/" + ".externalNativeBuild"
}

clean.finalizedBy cleanExternalNativeBuildCache
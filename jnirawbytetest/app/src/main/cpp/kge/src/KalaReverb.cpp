/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "KalaReverb.h"
#include "CReverb4.h"

#ifdef DEBUG
#include <android/log.h>
#define LOGV(...)   __android_log_print((int)ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)
#define LOGD(...)   __android_log_print((int)ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define LOGI(...)   __android_log_print((int)ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
#define LOGW(...)   __android_log_print((int)ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)
#define LOGE(...)   __android_log_print((int)ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
#else
#define LOGV(...)
#define LOGD(...)
#define LOGI(...)
#define LOGW(...)
#define LOGE(...)
#endif


//change to whatever you like
static constexpr auto LOG_TAG = "KalaReverb";

namespace KalaReverb {

/*
 * Class:     com_tencent_audioeffect_effect_KalaReverb
 * Method:    private static long create(int sampleRate, int dualChannel)
 * Signature: (II)J
 */
jlong create(JNIEnv *env, jclass clazz, jint sampleRate, jint channelCount) {
    CReverb4 *ins = new CReverb4();
    ins->Init(sampleRate, channelCount);
    return reinterpret_cast<jlong>(ins);
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaReverb
 * Method:    private static void getIdRange(long nativeHandel, int[] maxAndMin)
 * Signature: (J[I)V
 */
void getIdRange(JNIEnv *env, jclass clazz, jlong nativeHandel, jintArray maxAndMin) {
    CReverb4 *ins = reinterpret_cast<CReverb4 *>(nativeHandel);
    jboolean isCopy;
    jint *data = env->GetIntArrayElements(maxAndMin, &isCopy);

    LOGV("%s isCopy %d", __FUNCTION__, isCopy);

    ins->GetIdRange(data, data + 1);

    env->ReleaseIntArrayElements(maxAndMin, data, 0);
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaReverb
 * Method:    private static int getIdDefault(long nativeHandel)
 * Signature: (J)I
 */
jint getIdDefault(JNIEnv *env, jclass clazz, jlong nativeHandel) {
    CReverb4 *ins = reinterpret_cast<CReverb4 *>(nativeHandel);
    return ins->GetIdDefault();
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaReverb
 * Method:    private static int setTypeId(long nativeHandel, int type)
 * Signature: (JI)I
 */
jint setTypeId(JNIEnv *env, jclass clazz, jlong nativeHandel, jint type) {
    CReverb4 *ins = reinterpret_cast<CReverb4 *>(nativeHandel);
    return ins->SetTypeId(type);
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaReverb
 * Method:    private static int getTypeId(long nativeHandel)
 * Signature: (J)I
 */
jint getTypeId(JNIEnv *env, jclass clazz, jlong nativeHandel) {
    CReverb4 *ins = reinterpret_cast<CReverb4 *>(nativeHandel);
    ins->GetTypeId();
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaReverb
 * Method:    private static java.lang.String getNameId(long nativeHandel, int typeId)
 * Signature: (JI)Ljava/lang/String;
 */
jstring getNameId(JNIEnv *env, jclass clazz, jlong nativeHandel, jint typeId) {
    CReverb4 *ins = reinterpret_cast<CReverb4 *>(nativeHandel);
    const char *nameId = ins->GetNameById(typeId);
    return env->NewStringUTF(nameId);
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaReverb
 * Method:    private static int process(long nativeHandel, byte[] inBuffer, int insize, byte[] outBuffer, int outSize)
 * Signature: (J[BI[BI)I
 */
jint process(JNIEnv *env, jclass clazz, jlong nativeHandel, jbyteArray inBuffer, jint insize,
             jbyteArray outBuffer, jint outSize) {
    CReverb4 *ins = reinterpret_cast<CReverb4 *>(nativeHandel);
    jboolean inCopy, outCopy;

    jbyte *in = env->GetByteArrayElements(inBuffer, &inCopy);
    jbyte *out = env->GetByteArrayElements(outBuffer, &outCopy);

    int ret = ins->Process(
            reinterpret_cast<char *>(in), insize,
            reinterpret_cast<char *>(out), outSize);

    LOGV("%s in Size:%d IsCopy:%d; out Size:%d IsCopy:%d processLen:%d",
         __FUNCTION__, insize, inCopy, outSize, outCopy, ret);

    env->ReleaseByteArrayElements(inBuffer, in, JNI_ABORT);
    env->ReleaseByteArrayElements(outBuffer, out, 0);

    return ret;
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaReverb
 * Method:    private static void release(long nativeHandel)
 * Signature: (J)V
 */
void release(JNIEnv *env, jclass clazz, jlong nativeHandel) {
    CReverb4 *ins = reinterpret_cast<CReverb4 *>(nativeHandel);
    ins->Uninit();
    delete ins;
}


static const JNINativeMethod gsNativeMethods[] = {
        {
                /* method name      */ const_cast<char *>("create"),
                /* method signature */ const_cast<char *>("(II)J"),
                /* function pointer */ reinterpret_cast<void *>(create)
        },
        {
                /* method name      */ const_cast<char *>("getIdRange"),
                /* method signature */ const_cast<char *>("(J[I)V"),
                /* function pointer */ reinterpret_cast<void *>(getIdRange)
        },
        {
                /* method name      */ const_cast<char *>("getIdDefault"),
                /* method signature */ const_cast<char *>("(J)I"),
                /* function pointer */ reinterpret_cast<void *>(getIdDefault)
        },
        {
                /* method name      */ const_cast<char *>("setTypeId"),
                /* method signature */ const_cast<char *>("(JI)I"),
                /* function pointer */ reinterpret_cast<void *>(setTypeId)
        },
        {
                /* method name      */ const_cast<char *>("getTypeId"),
                /* method signature */ const_cast<char *>("(J)I"),
                /* function pointer */ reinterpret_cast<void *>(getTypeId)
        },
        {
                /* method name      */ const_cast<char *>("getNameId"),
                /* method signature */ const_cast<char *>("(JI)Ljava/lang/String;"),
                /* function pointer */ reinterpret_cast<void *>(getNameId)
        },
        {
                /* method name      */ const_cast<char *>("process"),
                /* method signature */ const_cast<char *>("(J[BI[BI)I"),
                /* function pointer */ reinterpret_cast<void *>(process)
        },
        {
                /* method name      */ const_cast<char *>("release"),
                /* method signature */ const_cast<char *>("(J)V"),
                /* function pointer */ reinterpret_cast<void *>(release)
        }
};
static const int gsMethodCount =
        sizeof(gsNativeMethods) / sizeof(JNINativeMethod);

/**
 * register Native functions
 * @returns success or not
 */
bool registerNativeFunctions(JNIEnv *env) {
    jclass clazz = env->FindClass(FULL_CLASS_NAME);
    return clazz != nullptr
           && 0 == env->RegisterNatives(clazz, gsNativeMethods, gsMethodCount);
}


} //endof namespace KalaReverb

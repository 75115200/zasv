/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "JniLocalRefTest.h"
#include <string>
#include <sstream>
#include <iomanip>

#ifdef DEBUG
#include <android/log.h>
#define LOGV(...)   __android_log_print((int)ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)
#define LOGD(...)   __android_log_print((int)ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define LOGI(...)   __android_log_print((int)ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
#define LOGW(...)   __android_log_print((int)ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)
#define LOGE(...)   __android_log_print((int)ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
#else
#define LOGV(...)
#define LOGD(...)
#define LOGI(...)
#define LOGW(...)
#define LOGE(...)
#endif


//change to whatever you like
static constexpr auto LOG_TAG = "JniLocalRefTest";

namespace JniLocalRefTest {

/*
 * Class:     com_young_jnirawbytetest_audiotest_JniLocalRefTest
 * Method:    public static java.lang.String process(java.lang.Object[] arr)
 * Signature: ([Ljava/lang/Object;)Ljava/lang/String;
 */
jstring process(JNIEnv *env, jclass clazz, jobjectArray arr) {
    std::ostringstream msg;

    if (arr == nullptr) {
        msg << "arr == nullptr";
    } else {
        jint arrLen = env->GetArrayLength(arr);
        msg << "arrLen = " << arrLen << '\n';

        for (int i = 0; i < arrLen; i++) {
            jobject item = env->GetObjectArrayElement(arr, i);
            msg << "arr[" << i << "] = " << reinterpret_cast<jint>(item) << '\n';
            env->DeleteLocalRef(item);
        }
    }

    jobjectRefType refType = env->GetObjectRefType(arr);
    msg << "jniRefTypeOf(arr) = ";
    switch (refType) {
        case JNIGlobalRefType:
            msg << "JNIGlobalRefType";
            break;
        case JNILocalRefType:
            msg << "JNILocalRefType";
            break;
        case JNIWeakGlobalRefType:
            msg << "JNIWeakGlobalRefType";
            break;
        default:
        case JNIInvalidRefType:
            msg << "JNIInvalidRefType";
            break;
    }

    // arr IS a local ref!!!
    // but you DON'T do this!!
    // the jni invocation api will help you do this after method returns.
    // env->DeleteLocalRef(arr);

    return env->NewStringUTF(msg.str().c_str());
}


static const JNINativeMethod gsNativeMethods[] = {
        {
                /* method name      */ const_cast<char *>("process"),
                /* method signature */ const_cast<char *>("([Ljava/lang/Object;)Ljava/lang/String;"),
                /* function pointer */ reinterpret_cast<void *>(process)
        }
};
static const int gsMethodCount =
        sizeof(gsNativeMethods) / sizeof(JNINativeMethod);

/**
 * register Native functions
 * @returns success or not
 */
bool registerNativeFunctions(JNIEnv *env) {
    jclass clazz = env->FindClass(FULL_CLASS_NAME);
    return clazz != nullptr
           && 0 == env->RegisterNatives(clazz, gsNativeMethods, gsMethodCount);
}


} //endof namespace JniLocalRefTest



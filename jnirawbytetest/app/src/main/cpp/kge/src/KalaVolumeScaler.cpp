/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "KalaVolumeScaler.h"
#include "CVolumeScaler.h"

#ifdef DEBUG
#include <android/log.h>
#define LOGV(...)   __android_log_print((int)ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)
#define LOGD(...)   __android_log_print((int)ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define LOGI(...)   __android_log_print((int)ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
#define LOGW(...)   __android_log_print((int)ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)
#define LOGE(...)   __android_log_print((int)ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
#else
#define LOGV(...)
#define LOGD(...)
#define LOGI(...)
#define LOGW(...)
#define LOGE(...)
#endif


//change to whatever you like
static constexpr auto LOG_TAG = "KalaVolumeScaler";

namespace KalaVolumeScaler {

/*
 * Class:     com_tencent_audioeffect_effect_KalaVolumeScaler
 * Method:    private static long create(int sampleRate, int dualChannel)
 * Signature: (II)J
 */
jlong create(JNIEnv *env, jclass clazz, jint sampleRate, jint channelCount) {
    CKalaVolumeScaler *ins = new CKalaVolumeScaler();
    ins->Init(sampleRate, channelCount);
    return reinterpret_cast<jlong>(ins);
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaVolumeScaler
 * Method:    private static int setScaleFactor(long nativeHandel, int factor)
 * Signature: (JI)I
 */
jint setScaleFactor(JNIEnv *env, jclass clazz, jlong nativeHandel, jint factor) {
    CKalaVolumeScaler *ins = reinterpret_cast<CKalaVolumeScaler *>(nativeHandel);
    return ins->SetScaleFactor(factor);
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaVolumeScaler
 * Method:    private static int process(long nativeHandel, byte[] inOutBuffer, int size)
 * Signature: (J[BI)I
 */
jint process(JNIEnv *env, jclass clazz, jlong nativeHandel, jbyteArray inOutBuffer, jint size) {
    CKalaVolumeScaler *ins = reinterpret_cast<CKalaVolumeScaler *>(nativeHandel);

    jboolean isCopy;
    jbyte *bytes = env->GetByteArrayElements(inOutBuffer, &isCopy);

    jint ret = ins->Process(reinterpret_cast<char *>(bytes), size);

    LOGV("%s buffer Size:%d isCopy:%d processLen:%d", __FUNCTION__, size, isCopy, ret);

    env->ReleaseByteArrayElements(inOutBuffer, bytes, 0);
    return ret;
}


/*
 * Class:     com_tencent_audioeffect_effect_KalaVolumeScaler
 * Method:    private static void release(long nativeHandel)
 * Signature: (J)V
 */
void release(JNIEnv *env, jclass clazz, jlong nativeHandel) {
    CKalaVolumeScaler *ins = reinterpret_cast<CKalaVolumeScaler *>(nativeHandel);
    delete ins;
    return;
}


static const JNINativeMethod gsNativeMethods[] = {
        {
                /* method name      */ const_cast<char *>("create"),
                /* method signature */ const_cast<char *>("(II)J"),
                /* function pointer */ reinterpret_cast<void *>(create)
        },
        {
                /* method name      */ const_cast<char *>("setScaleFactor"),
                /* method signature */ const_cast<char *>("(JI)I"),
                /* function pointer */ reinterpret_cast<void *>(setScaleFactor)
        },
        {
                /* method name      */ const_cast<char *>("process"),
                /* method signature */ const_cast<char *>("(J[BI)I"),
                /* function pointer */ reinterpret_cast<void *>(process)
        },
        {
                /* method name      */ const_cast<char *>("release"),
                /* method signature */ const_cast<char *>("(J)V"),
                /* function pointer */ reinterpret_cast<void *>(release)
        }
};
static const int gsMethodCount =
        sizeof(gsNativeMethods) / sizeof(JNINativeMethod);

/**
 * register Native functions
 * @returns success or not
 */
bool registerNativeFunctions(JNIEnv *env) {
    jclass clazz = env->FindClass(FULL_CLASS_NAME);
    return clazz != nullptr
           && 0 == env->RegisterNatives(clazz, gsNativeMethods, gsMethodCount);
}


} //endof namespace KalaVolumeScaler
